/*
* 한빛미디어 이것이 코딩테스트다 중 하나
*
* 개미 전사 알고리즘
*
* 문제
* 개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량창고를 몰래 공격하려고 한다.
* 메뚜기 마을에는 여러개의 식량창고가 있는데 식량창고는 일직선으로 이어져 있습니다.
*
* 각 식량 창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 식량창고를 선택적으로 약탈하여 식량을
* 뺏을 예정입니다. 이때 메뚜기 정찰병들은 일직선 상에 존재하는 식량 창고 중에서 서로 인접한 식량 창고가 공격을 받으면
* 바로 알아챌수 있습니다.
*
* 따라서 개미 전사가 정찰병에게 들키지 않고 식량창고를 약탈하기 위해서는 최소한 한칸 이상 떨어진 식량창고를 털어야한다.
*
* 예를 들어 식량창고 N개가 주어졌을 때 얻을 수 있는 식량의 최대값을 구하는 프로그래밍을 작성하기오
* ex) {1,3,1,5}
*
* answer = 8
* ex) {1,3,1,5,1}
*
* 3, 5 ==> 8개
* */
import java.util.*;

public class AntWarrior {
//
//     int static Foodbank(int [] arr){
//        //N개의 식량창고
//        int N = d.length;
//        //해설
//        //a(i) = i번쨰 식량창고까지의 최적의 해(얻을 수 있는 식량의 최대값)
//        //ex) {1,3,1,5}
//        //DP 테이블의 값 a(0) = 1 a(1)= 3 a(2) = 3 a(3)=8
//
//        //a(i) = i번째 식량창고까지의 최적의 해(얻을 수 있는 식량의 최대값)
//        //k(i) = i번째 식량창고에 있는 식량의 양
//
//        //점화식 a(i) = max(a(i-1),a(i-2)+k(i))
//        //한 칸 이상 떨어진 식량창고는 항상 털 수 있으므로(i-3)번째 이하는 고려할 필요가 없다.
//
//        int [] dp = new int[arr.length]; //DP테이블을 저장할 공간
//        dp[0] = arr[0];
//        dp[1] = Math.max(arr[0],arr[1]);
//
//        for(int i=2;i<n;i++){
//            dp[i]= Math.max(dp[i-1],dp[i-2]+arr[i]);
//        }
//
//        return 1;
//
//    }




    public static void main(String[] args) {

    }
}
